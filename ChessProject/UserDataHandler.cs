using System.Diagnostics;using System.Linq;
using ChessLibrary;using ChessLibrary.GameFigures;namespace ChessProject;public class UserDataHandler{    #region Local Properties    //array of IFigure type objects representing chess figures    public static IFigure[] figures = new IFigure[5];    //only figure names are on the board. only the figure name will be nulled and    //rewritten on the board    public static string[,] BoardWithFigures { get; set; } = new string[8, 8];    //figure names and legal steps are on the board. this board will be nulled and    //refilled by each step.    public static string[,] BoardWithFiguresSteps { get; set; } = new string[8, 8];    #endregion    /// <summary>    /// Method initialises figures array with figure objects, clones a second array for figures and    /// writes figures' legal steps on it.     /// </summary>    /// <returns>Returns array of IFigure type objects representing chess figures.</returns>    public static IFigure[] GetFigures01()    {        //get inputs for white figures        figures = InitialInputForWhites01(BoardWithFigures);        //clone <BoardWithFigures> data to <BoardWithFiguresSteps> array        BoardWithFiguresSteps = (string[,])BoardWithFigures.Clone();        //write figure names on <BoardWithFiguresSteps> by user input coordinates        for (int i=0; i<=3; i++)        {            Board.WriteLegalStepsOnBoard(figures[i], BoardWithFiguresSteps);        }        //get Black King user input, add to <figures> array        figures[4] = InputBlackKing();        BoardWithFigures[figures[4].Row, figures[4].Column] = figures[4].Name;        BoardWithFiguresSteps = (string[,])BoardWithFigures.Clone();                //write figure names on <BoardWithFiguresSteps> by user input coordinates        for (int i = 0; i <= 4; i++)        {            Board.WriteLegalStepsOnBoard(figures[i], BoardWithFiguresSteps);        }        return figures;    }        public static IFigure[] GetFigures02()    {        //get inputs for white figures        figures = InitialInputForWhites02(BoardWithFigures);        //clone <BoardWithFigures> data to <BoardWithFiguresSteps> array        BoardWithFiguresSteps = (string[,])BoardWithFigures.Clone();

        //write figure names on <BoardWithFiguresSteps> by user input coordinates
        for (int i = 0; i <= 3; i++)        {
            if (i != 3)
            {
                Board.WriteLegalStepsOnBoard(figures[i], BoardWithFiguresSteps);
            }
        }        //get Black King user input, add to <figures> array        figures[4] = InputBlackKing();        BoardWithFigures[figures[4].Row, figures[4].Column] = figures[4].Name;        BoardWithFiguresSteps = (string[,])BoardWithFigures.Clone();                //write figure names on <BoardWithFiguresSteps> by user input coordinates        for (int i = 0; i <= 4; i++)        {            if (i!=3)
            {
                Board.WriteLegalStepsOnBoard(figures[i], BoardWithFiguresSteps);
            }        }        return figures;    }        public static IFigure[] GetFigures03()    {        //get inputs for white figures        figures = InitialInputForWhites03(BoardWithFigures);        //clone <BoardWithFigures> data to <BoardWithFiguresSteps> array        BoardWithFiguresSteps = (string[,])BoardWithFigures.Clone();

        //write figure names on <BoardWithFiguresSteps> by user input coordinates
        for (int i = 0; i <= 3; i++)        {
            if (i != 3 && i != 2)
            {
                Board.WriteLegalStepsOnBoard(figures[i], BoardWithFiguresSteps);
            }
        }        //get Black King user input, add to <figures> array        figures[4] = InputBlackKing();        BoardWithFigures[figures[4].Row, figures[4].Column] = figures[4].Name;        BoardWithFiguresSteps = (string[,])BoardWithFigures.Clone();                //write figure names on <BoardWithFiguresSteps> by user input coordinates        for (int i = 0; i <= 4; i++)        {            if (i != 3 && i != 2)
            {
                Board.WriteLegalStepsOnBoard(figures[i], BoardWithFiguresSteps);
            }        }        return figures;    }    /// <summary>    /// Gets user input for figure coordinates, writes figure names by given coordinates    /// on Board.WriteFigureOnBoard array, adds figure objects to local figures array.    /// </summary>    /// <returns>Returns IFigure type array of objects representing chess figures.</returns>    public static IFigure[] InitialInputForWhites01(string[,] board)    {        Console.Write("****** INPUT POSITIONS ******" +                      "\nInput command, where first symbol is a letter " +                      "from ՛a՛ to ՛h՛ or 'A' to 'H' and second command is" +                      " a number from ՛1՛ to ՛8՛ (ex.a8 or H1). \nWhite King: ");        //White King        King wk = new King(GetCoordinates(), "white");        Board.WriteFigureOnBoard(wk, board);        figures[0] = wk;        Board.BoardPrinterForDebug(board);        //White Queen        Console.Write("White Queen: ");        Queen wq = new Queen(GetCoordinates());               Board.WriteFigureOnBoard(wq, board);        figures[1] = wq;        Board.BoardPrinterForDebug(board);        //White Rook 1        Console.Write("White Rook 1: ");        Rook r1 = new Rook(GetCoordinates(), "1");               Board.WriteFigureOnBoard(r1, board);        figures[2] = r1;        Board.BoardPrinterForDebug(board);        //White Rook 2        Console.Write("White Rook 2: ");        Rook r2 = new Rook(GetCoordinates(), "2");               Board.WriteFigureOnBoard(r2, board);        figures[3] = r2;        Board.BoardPrinterForDebug(board);        return figures;    }        public static IFigure[] InitialInputForWhites02(string[,] board)    {        Console.Write("****** INPUT POSITIONS ******" +                      "\nInput command, where first symbol is a letter " +                      "from ՛a՛ to ՛h՛ or 'A' to 'H' and second command is" +                      " a number from ՛1՛ to ՛8՛ (ex.a8 or H1). \nWhite King: ");        //White King        King wk = new King(GetCoordinates(), "white");        Board.WriteFigureOnBoard(wk, board);        figures[0] = wk;        Board.BoardPrinterForDebug(board);        //White Queen        Console.Write("White Queen: ");        Queen wq = new Queen(GetCoordinates());               Board.WriteFigureOnBoard(wq, board);        figures[1] = wq;        Board.BoardPrinterForDebug(board);        //White Rook 1        Console.Write("White Rook 1: ");        Rook r1 = new Rook(GetCoordinates(), "1");               Board.WriteFigureOnBoard(r1, board);        figures[2] = r1;        Board.BoardPrinterForDebug(board);

        //White Rook 2 doesn't exist 

        Rook r2 = new Rook();
        figures[3] = r2;        return figures;    }        public static IFigure[] InitialInputForWhites03(string[,] board)    {        Console.Write("****** INPUT POSITIONS ******" +                      "\nInput command, where first symbol is a letter " +                      "from ՛a՛ to ՛h՛ or 'A' to 'H' and second command is" +                      " a number from ՛1՛ to ՛8՛ (ex.a8 or H1). \nWhite King: ");        //White King        King wk = new King(GetCoordinates(), "white");        Board.WriteFigureOnBoard(wk, board);        figures[0] = wk;        Board.BoardPrinterForDebug(board);        //White Queen        Console.Write("White Queen: ");        Queen wq = new Queen(GetCoordinates());               Board.WriteFigureOnBoard(wq, board);        figures[1] = wq;        Board.BoardPrinterForDebug(board);

        //White Rook 1  doesn't exist 
        Rook r1 = new Rook();               figures[2] = r1;
        //White Rook 2 doesn't exist 
        Rook r2 = new Rook();
        figures[3] = r2;        return figures;    }    /// <summary>    /// When 4 white figures are inputted on Board.WriteFigureOnBoard array, method gets user    /// input for the Black King figure, validates input.    /// </summary>    /// <returns>Returns King type object representing Black King figure.</returns>    public static King InputBlackKing()    {        Console.Write("Black King: ");        King bk = new King(GetCoordinates(), "black");        if (King.KingIsNotUnderAttack(bk, BoardWithFiguresSteps))        {            return bk;        }        else        {            Console.Write("\nIn this position, the Black King will be under attack. " +                          "Please input new position. \n");            return InputBlackKing();        }    }    public static King InputBlackKing(Board boardObj, List<IFigure>whiteAttackers)    {        Board boardObj2 = new Board(boardObj);        boardObj2.BoardWithFigures[figures[4].Row, figures[4].Column] = null;        Console.Write("Black King: ");        King bk = new King(GetCoordinates(boardObj), "black");        if (!bk.IsUnderAttack(boardObj, bk))        {            return bk;        }        else        {            Console.Write("\nIn this position, the Black King will be under attack. " +                          "Please input new position. \n");            return InputBlackKing();        }    }    /// <summary>    /// After inputing 5 figures on the board, the turn is of the black king. User shall input new position.    /// </summary>    /// <returns>Returns array of IFigure type objects where the position of black king is changed.</returns>    public static IFigure[] MoveBlackKing(Board boardObj, List<IFigure>whiteAttackers)    {        //*** steps ***        //get input for BK move in endgame        Console.Write("Your turn: Move ");        boardObj.Figures[4] = InputBlackKing(boardObj, whiteAttackers);        return boardObj.Figures;    }        /// <summary>    /// Obtains user input for figures' positions, validates both input and null-value cells.     /// </summary>    /// <returns>Returns 2D array for coordinates.</returns>    public static int[,] GetCoordinates()    {        int row;        int column;        string AlgebraicNotation = Console.ReadLine().ToUpper();        Coordinates coordinates = new Coordinates();        //check validity of user input and return two-dimensional array        if ((AlgebraicNotation.Length == 2) &&            (AlgebraicNotation[0] >= 65 && AlgebraicNotation[0] <= 72) &&            (AlgebraicNotation[1] >= 49 && AlgebraicNotation[1] <= 56))        {            //coords = coordinates.Create2DArrayByCoordinates(((int)AlgebraicNotation[0] - 65),((int)AlgebraicNotation[1] - 49));            column = (int)AlgebraicNotation[0] - 65;            row = (int)AlgebraicNotation[1] - 49;            if (BoardWithFigures[row, column] == null)                return ChessLibrary.Coordinates.Create2DArrayByCoordinates(row, column);            else            {                Console.Write("*** POSITION ALREADY OCCUPIED. *** \nNew input: ");                return GetCoordinates();            }        }        else        {            Console.Write("*** WRONG INPUT *** \nNew input: ");            return GetCoordinates();        }    }    /// <summary>    /// Obtains user input for figures' positions, validates both input and null-value cells.     /// </summary>    /// <returns>Returns 2D array for coordinates.</returns>    public static int[,] GetCoordinates(Board boardObj)    {        int row;        int column;        string AlgebraicNotation = Console.ReadLine().ToUpper();        Coordinates coordinates = new Coordinates();        //check validity of user input and return two-dimensional array        if ((AlgebraicNotation.Length == 2) &&            (AlgebraicNotation[0] >= 65 && AlgebraicNotation[0] <= 72) &&            (AlgebraicNotation[1] >= 49 && AlgebraicNotation[1] <= 56))        {            //coords = coordinates.Create2DArrayByCoordinates(((int)AlgebraicNotation[0] - 65),((int)AlgebraicNotation[1] - 49));            column = (int)AlgebraicNotation[0] - 65;            row = (int)AlgebraicNotation[1] - 49;            if (boardObj.BoardWithFiguresSteps[row, column] != null &&                boardObj.BoardWithFiguresSteps[row, column].Length == 1 &&                boardObj.BoardWithFiguresSteps[row, column].Contains(boardObj.Figures[4].StepSymbol))                return ChessLibrary.Coordinates.Create2DArrayByCoordinates(row, column);            else            {                Console.Write("*** Step is not valid *** \nNew input: ");               return GetCoordinates(boardObj);            }        }        else        {            Console.Write("*** WRONG INPUT *** \nNew input: ");            return GetCoordinates(boardObj);        }    }}